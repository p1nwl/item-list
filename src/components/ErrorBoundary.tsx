import { Component } from "react";
import type { ReactNode } from "react";

interface Props {
  /** –ß—Ç–æ —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å, –µ—Å–ª–∏ –≤—Å—ë —Ö–æ—Ä–æ—à–æ */
  children: ReactNode;
  /** –ß—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å, –∫–æ–≥–¥–∞ —Å–ª—É—á–∏–ª–∞—Å—å –æ—à–∏–±–∫–∞ */
  fallback?: ReactNode;
}

interface State {
  hasError: boolean;
}

/**
 * –ö–ª–∞—Å—Å‚Äë–æ–±—ë—Ä—Ç–∫–∞: –ª–æ–≤–∏—Ç –æ—à–∏–±–∫–∏ –≤—Å–µ—Ö –ø–æ—Ç–æ–º–∫–æ–≤ –≤ runtime
 */
export default class ErrorBoundary extends Component<Props, State> {
  state: State = { hasError: false };

  static getDerivedStateFromError() {
    return { hasError: true };
  }

  componentDidCatch(error: unknown, info: unknown) {
    /* –ú–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤ Sentry / console */
    console.error("Uncaught error:", error, info);
  }

  render() {
    if (this.state.hasError) {
      return (
        this.props.fallback ?? (
          <p style={{ padding: 24, textAlign: "center" }}>
            –£–ø—Å! –ß—Ç–æ‚Äë—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üò¢
          </p>
        )
      );
    }
    return this.props.children;
  }
}
